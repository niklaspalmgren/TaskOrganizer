@using TaskOrganizer.Shared
@using TaskOrganizer.AppServer.Services
@inject ITaskService taskService;
@inject ITaskBoardService taskBoardService;



<div class="row gy-2 mb-2 justify-content-between">
    <div class="col-auto">
        <h3 class="task-board-title">@TaskBoard.Name</h3>
    </div>
    <div class="col-auto">
        <i class="fs-5 bi bi-trash delete-taskboard-button cursor-hand" @onclick="DeleteTaskBoardAsync"></i>
    </div>
</div>

    @if (IsNewTaskModeEnabled)
{
    <div class="row gy-2 mb-3" id="newTaskRow">
        <div class="col">
            <NewTaskComponent TaskBoardId="@TaskBoard.Id" OnNewTaskCreated="@HandleCreatedTask" OnNewTaskCanceled="@ExitNewTaskMode" />
        </div>
    </div>
}
else
{
    <div class="row gy-2 mb-3">
        <div class="col d-grid">
            <button class="btn btn-outline-light" @onclick="@EnterNewTaskMode">
                <i class="bi bi-plus-lg"></i> Add Task
            </button>
        </div>
    </div>
}

@foreach (var task in TaskBoard.Tasks)
{
    <div class="row gy-2 mb-3">
        <div class="col">
            <TaskComponent Task="@task" TaskBoards="@TaskBoards" OnTaskChangedBoard="@HandleTaskChangedBoardAsync" OnDeleted="@RemoveTask" />
        </div>
    </div>
}


@code {
    [Parameter]
    public TaskBoardDto TaskBoard { get; set; }
    [Parameter]
    public List<TaskBoardDto> TaskBoards { get; set; } = new List<TaskBoardDto>();

    [Parameter]
    public EventCallback<TaskBoardDto> OnTaskBoardDeleted { get; set; }

    [Parameter]
    public EventCallback<TaskDto> OnTaskChangedBoard{ get; set; }

    private bool IsNewTaskModeEnabled { get; set; } = false;

    private bool IsDeleteButtonVisible { get; set; }

    private void EnterNewTaskMode()
    {
        IsNewTaskModeEnabled = true;
    }

    private void ExitNewTaskMode()
    {
        IsNewTaskModeEnabled = false;
    }

    private void RemoveTask(TaskDto taskDto)
    {
        var task = TaskBoard.Tasks.FirstOrDefault(x => x.Id == taskDto.Id);

        if (task != null)
            TaskBoard.Tasks.Remove(task);
    }

    private async Task HandleTaskChangedBoardAsync(TaskDto task)
    {
        RemoveTask(task);
        await OnTaskChangedBoard.InvokeAsync(task);
    }

    private async Task DeleteTaskBoardAsync()
    {
        await taskBoardService.DeleteTaskBoardAsync(TaskBoard);
        await OnTaskBoardDeleted.InvokeAsync(TaskBoard);
    }

    private void HandleCreatedTask(TaskDto task)
    {
        ExitNewTaskMode();
        TaskBoard.Tasks.Add(task);
    }
}
