@using TaskOrganizer.AppServer.Services
@using TaskOrganizer.Shared
@using TaskOrganizer.Shared.Factories
@inject ITaskFactory taskFactory;
@inject ITaskService taskService;

<div class="card task shadow">
    <div class="card-body">
        <EditForm Model="@Task" OnValidSubmit="@CreateTaskAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group row">
                <label class="col-form-label">Name</label>
                <div class="col">
                    <InputText id="name" @bind-Value="Task.Name" class="form-control" />
                </div>

            </div>

            <div class="form-group row">
                <label class="col-form-label">Description</label>
                <div class="col">
                    <InputTextArea id="description" @bind-Value="Task.Description" class="form-control" />
                </div>

            </div>

            <div class="form-group row mt-4">
                <div class="col">
                    <button type="submit" class="btn btn-success form-control">Add Task</button>
                </div>
                <div class="col">
                    <button type="button" @onclick="@CancelAsync" class="btn btn-outline-light form-control">Cancel</button>
                </div>
            </div>


        </EditForm>

    </div>
</div>

@code {
    [Parameter]
    public int TaskBoardId { get; set; }

    [Parameter]
    public EventCallback<TaskDto> OnNewTaskCreated { get; set; }

    [Parameter]
    public EventCallback OnNewTaskCanceled { get; set; }

    protected TaskDto Task { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Task = taskFactory.Create(TaskBoardId);
    }

    private async Task CancelAsync()
    {
        await OnNewTaskCanceled.InvokeAsync();
    }

    private async Task CreateTaskAsync()
    {
        var createdTask = await taskService.CreateTaskAsync(Task);

        if (createdTask == null)
            return;

        await OnNewTaskCreated.InvokeAsync(createdTask);
    }
}
