@using TaskOrganizer.Shared
@using TaskOrganizer.AppServer.Services
@using TaskOrganizer.Shared.Factories
@inject ITaskService taskService;
@inject ITaskFactory taskFactory;

@if (_inEditMode)
{
    <div class="card task shadow">
        <div class="card-body">
            <EditForm Model="@_editedTask" OnValidSubmit="@UpdateTaskAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group row">
                    <label class="col-form-label">Name</label>
                    <div class="col">
                        <InputText @bind-Value="_editedTask.Name" class="form-control" />
                    </div>

                </div>

                <div class="form-group row">
                    <label class="col-form-label">Description</label>
                    <div class="col">
                        <InputTextArea @bind-Value="_editedTask.Description" class="form-control" />
                    </div>

                </div>

                <div class="form-group row">
                    <label class="col-form-label">Board</label>
                    <div class="col">
                        <InputSelect @bind-Value="_editedTask.TaskBoardId" class="form-select">
                            @foreach (var board in TaskBoards)
                            {
                            <option value="@board.Id">@board.Name</option>
                            }
                    </InputSelect>
                </div>
            </div>

            <div class="form-group row mt-4">
                <div class="col">
                    <button type="submit" class="btn btn-success form-control">Update</button>
                </div>
            </div>

            <div class="form-group gx-2 row mt-2">
                <div class="col">
                    <button type="button" @onclick="@DeleteTaskAsync" class="btn btn-danger form-control">Delete</button>
                </div>
                <div class="col">
                    <button type="button" @onclick="@CancelEdit" class="btn btn-outline-light form-control">Cancel</button>
                </div>
            </div>


        </EditForm>
    </div>
</div>
}
else
{
    <div class="card task shadow" @onclick="@EnterEditMode">
        <div class="card-body">
            <h5 class="card-title">@Task.Name</h5>
            <p class="card-text text-muted">@Task.Description</p>
        </div>
    </div>
}

@code {
    [Parameter]
    public TaskDto? Task { get; set; }

    [Parameter]
    public EventCallback<TaskDto> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<TaskDto> OnUpdated { get; set; }

    [Parameter]
    public List<TaskBoardDto> TaskBoards { get; set; } = new List<TaskBoardDto>();

    private TaskDto? _editedTask { get; set; }
    private bool _inEditMode { get; set; }

    private void EnterEditMode()
    {
        if (Task == null)
            return;

        _editedTask = taskFactory.Create(Task.Name, Task.Description, Task.TaskBoardId);
        _inEditMode = true;
    }

    private void CancelEdit()
    {
        if (Task == null)
            return;

        _editedTask = taskFactory.Create(Task.TaskBoardId);
        _inEditMode = false;
    }

    private async Task DeleteTaskAsync()
    {
        if (Task == null)
            return;

        await taskService.DeleteTaskAsync(Task);
        await OnDeleted.InvokeAsync(Task);
    }

    private async Task UpdateTaskAsync()
    {
        if (Task == null || _editedTask == null)
            return;

        Task.Name = _editedTask.Name;
        Task.Description = _editedTask.Description;
        Task.TaskBoardId = _editedTask.TaskBoardId;

        await taskService.UpdateTaskAsync(Task);
        await OnUpdated.InvokeAsync(Task);

        CancelEdit();
    }
}
