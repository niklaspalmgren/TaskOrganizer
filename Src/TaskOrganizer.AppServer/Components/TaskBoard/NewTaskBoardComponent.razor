@using TaskOrganizer.AppServer.Services
@using TaskOrganizer.Shared
@using TaskOrganizer.Shared.Factories
@using System.Globalization
@inject ITaskBoardService TaskBoardService;
@inject ITaskBoardFactory TaskBoardFactory;


<div class="row gy-2">
    <div class="col">
        <button @onclick="@CreateNewTaskBoardAsync" type="button" class="btn color-purple"><i class="bi bi-plus-lg"></i> Add Board</button>
    </div>
</div>

@code
{
    [Parameter]
    public EventCallback<TaskBoardDto> OnCreated { get; set; }

    private async Task CreateNewTaskBoardAsync()
    {
        var newTaskBoard = TaskBoardFactory.Create("Click to rename");

        var taskBoards = await TaskBoardService.GetTaskBoardsAsync();

        foreach (var board in taskBoards)
        {
            if (!NameEndsWithSequenceNumber(board.Name))
                continue;

            newTaskBoard.Name = FormatTaskBoardName(board.Name);
        }

        var createdTaskboard = await TaskBoardService.CreateTaskBoardAsync(newTaskBoard);
        await OnCreated.InvokeAsync(createdTaskboard);
    }

    private bool NameEndsWithSequenceNumber(string name)
    {
        var splitName = name.Split(" ");
        var possibleSequenceNumber = splitName.LastOrDefault();

        return int.TryParse(possibleSequenceNumber, out _);
    }
    
    private string FormatTaskBoardName(string oldTaskBoardName)
    {
        var splitStr = oldTaskBoardName.Split(" ");
        var possibleSequenceNumber = splitStr.LastOrDefault();

        int.TryParse(possibleSequenceNumber, out var sequenceNumber);
        
        var index = Array.IndexOf(splitStr, possibleSequenceNumber);

        // Update sequence number
        sequenceNumber++;
        splitStr[index] = sequenceNumber.ToString();

        return string.Join(" ", splitStr);
    }

}