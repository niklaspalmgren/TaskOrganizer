@using TaskOrganizer.AppServer.DragDrop
@using TaskOrganizer.Shared
@using TaskOrganizer.AppServer.Services
@using TaskOrganizer.AppServer.Components.Task
@implements IDisposable
@inject ISearchTasksService SearchTasksService;
@inject ITaskService TaskService;
@inject ITaskBoardService TaskBoardService;
@inject IDragDropService DragDropService;

@if (TaskBoard is not null)
{
    <DropZoneComponent DropHandler="@dropHandler">
        <div class="task-board tm-bg-accent rounded-2 p-2">
            <div class="row">
                <div class="col task-board-header">
                    @if (InEditMode)
                    {
                        <EditTaskBoardComponent TaskBoard="@TaskBoard" OnExitEditMode="() => InEditMode = false" />
                    }
                    else
                    {
                        <h5 class="task-board-name"
                    @onclick="@EnterTaskBoardEditMode">
                            @TaskBoard.Name
                        </h5>
                    }

                </div>
                @if (!InEditMode)
                {
                    <div class="col-auto mx-2">
                        <DropDown>
                            <DropDownListItem OnClick="OrderTasksByNameAscAsync">Order by title ascending</DropDownListItem>
                            <DropDownListItem OnClick="OrderTasksByNameAscDesc">Order by title descending</DropDownListItem>
                            <DropDownListItem IsSeparator="true" />
                            <DropDownListItem OnClick="DeleteTaskBoardAsync">Delete</DropDownListItem>
                        </DropDown>
                    </div>
                }

                <div class="col-12">
                    <small class="text-light" data-toggle="tooltip" data-placement="bottom" title="@CompletedTasksCount of @Tasks.Count tasks completed.">
                        @CompletedTasksCount/@Tasks.Count
                    </small>
                </div>
            </div>



            @foreach (var task in Tasks)
            {
                <div class="row mt-2">
                    <div class="col">
                        <TaskComponent Task="@task" OnDeleted="RemoveTask" OnUpdated="() => StateHasChanged()" />
                    </div>
                </div>
            }

            @if (InNewTaskMode)
            {
                <div class="row mt-2" id="newTaskRow">
                    <div class="col">
                        <NewTaskComponent TaskBoardId="@TaskBoard.Id" OnCreated="HandleTaskCreated" OnCanceled="() => InNewTaskMode = false" />
                    </div>
                </div>
            }
            else if (!SearchTasksService.IsSearching)
            {
                <div class="row mt-2">
                    <div class="col d-grid">
                        <button class="btn btn-sm btn-outline-light border-0 text-start" @onclick="@EnterNewTaskMode">
                            <i class="bi bi-plus-lg"></i> Add Task
                        </button>
                    </div>
                </div>
            }

        </div>

    </DropZoneComponent>
}



@code {

    [Parameter]
    public TaskBoardDto? TaskBoard { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    private List<TaskDto> Tasks { get; set; } = new();

    private bool InNewTaskMode { get; set; } = false;

    private bool IsDeleteButtonVisible { get; set; }

    private int CompletedTasksCount => Tasks.Where(x => x.IsCompleted).Count();

    private bool InEditMode { get; set; }

    private IDragDropHandler dropHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dropHandler = new DropHandler(DropTask, "task");
        SearchTasksService.Notify += OnSearchAsync;

        if (TaskBoard is not null)
            Tasks = await TaskService.GetTasksForBoardAsync(TaskBoard.Id);

    }

    public void Dispose()
    {
        SearchTasksService.Notify -= OnSearchAsync;
    }

    private async Task OnSearchAsync(string searchBy)
    {
        if (TaskBoard is not null)
            Tasks = await TaskService.GetTasksForBoardAsync(TaskBoard.Id, searchBy);

        StateHasChanged();
    }

    private void EnterNewTaskMode()
    {
        InNewTaskMode = true;
    }

    private void ExitNewTaskMode()
    {
        InNewTaskMode = false;
    }

    private async Task DeleteTaskBoardAsync()
    {
        if (TaskBoard is null)
            return;

        await TaskBoardService.DeleteTaskBoardAsync(TaskBoard);
        await OnDeleted.InvokeAsync(TaskBoard.Id);
    }

    private async Task DropTask(object payLoad)
    {
        if (payLoad is not TaskDto task)
            return;

        // Update task
        // task.TaskBoardId = TaskBoard.Id;
        // await SearchTasksService.UpdateTaskAsync(task);
    }

    private void HandleTaskCreated(TaskDto task)
    {
        InNewTaskMode = false;
        AddTask(task);
    }

    private void AddTask(TaskDto task)
    {
        Tasks.Add(task);
    }

    private void RemoveTask(int taskId)
    {
        var task = Tasks.FirstOrDefault(x => x.Id == taskId);

        if (task is not null)
            Tasks.Remove(task);
    }


    private void EnterTaskBoardEditMode()
    {
        InEditMode = true;
    }

    private void OrderTasksByNameAscAsync()
    {
        var reorderer = new TaskReorderer();
        Tasks = reorderer.OrderByNameAsc(Tasks);
        TaskService.UpdateTasksAsync(Tasks);
    }

    private void OrderTasksByNameAscDesc()
    {
        var reorderer = new TaskReorderer();
        Tasks = reorderer.OrderByNameDesc(Tasks);
        TaskService.UpdateTasksAsync(Tasks);
    }

}