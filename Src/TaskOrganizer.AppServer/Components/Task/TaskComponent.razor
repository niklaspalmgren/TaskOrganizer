@using TaskOrganizer.AppServer.DragDrop
@using TaskOrganizer.Shared
@using TaskOrganizer.AppServer.Services
@inject IDragDropService dragDropService;
@inject IUserService UserService;

@if (InEditMode)
{
    <div class="card task">
        <div class="card-body">
            <EditTaskComponent Task="@Task"
                           OnUpdated="() => InEditMode = false"
                           OnCanceled="() => InEditMode = false"
                           OnDeleted="HandleTaskDeletedAsync" />
        </div>
    </div>
}
else
{
    <DraggableComponent DragHandler="@dragHandler">
        <div class="card task"
         @onclick="() => InEditMode = true">
            <div class="card-body">
                <h5 class="card-title text-truncate">@Task.Name</h5>
                <p class="card-text text-muted">@Task.Description</p>

                <div class="row card-text">
                    <div class="col">
                        <span class="badge @BadgeBgClass">@Task.Category</span>
                    </div>
                    <div class="col text-end">
                        @if (Task.UserId is not null)
                        {
                            <UserNameComponent UserId="@Task.UserId" />
                        }
                    </div>

                </div>
                <div class="card-text">
                </div>


            </div>
        </div>
    </DraggableComponent>
}



@code {

    [Parameter]
    public TaskDto? Task { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }

    [Parameter]
    public EventCallback<TaskDto> OnTaskChangedBoard { get; set; }

    string BadgeBgClass => GetBadgeBg(Task);

    private bool InEditMode { get; set; }

    private IDragDropHandler dragHandler { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dragHandler = new DragHandler(DropTask, Task, "task");
        await base.OnInitializedAsync();
    }

    private async Task HandleTaskDeletedAsync(int id)
    {
        InEditMode = false;
        await OnDeleted.InvokeAsync(id);
    }

    private async Task DropTask(object payLoad)
    {
        if (payLoad is not TaskDto task)
            return;

        await OnDeleted.InvokeAsync(task.Id);
    }

    private string GetBadgeBg(TaskDto? task)
    {
        if (task is null)
            return string.Empty;


        return task.Category switch
        {
            TaskCategory.Bug => "bg-danger",
            TaskCategory.Feature => "bg-warning",
            TaskCategory.ChangeRequest => "bg-purple",
            _ => throw new ArgumentOutOfRangeException()
        };
    }

}