@using TaskOrganizer.AppServer.Services
@using TaskOrganizer.Shared
@inject NavigationManager NavigationManager
@inject ITaskService TaskService;
@inject ITaskBoardService TaskBoardService;
@inject IUserService UserService;

@if (Task is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="@Task"
          OnValidSubmit="@UpdateTaskAsync">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-2">
            <div class="col-12">
                <label class="form-label-sm">Name</label>
                <InputText @ref="@NameTextInput" @bind-Value="Task.Name" class="form-control form-control-sm" />
            </div>

            <div class="col-6">
                <label class="form-label-sm">Board</label>
                <InputSelect @bind-Value="Task.TaskBoardId" class="form-control form-select-sm">
                    @foreach (var board in TaskBoards)
                    {
                        <option value="@board.Id">@board.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="col-6">
                <label class="form-label-sm">Category</label>
                <InputSelect @bind-Value="Task.Category" class="form-select form-select-sm">
                    <option value="@TaskCategory.Bug">Bug</option>
                    <option value="@TaskCategory.Feature">Feature</option>
                    <option value="@TaskCategory.Change">Change</option>
                </InputSelect>
            </div>

            <div class="col-12">
                <label class="form-label-sm">Assigned To</label>
                <InputSelect @bind-Value="Task.UserId" class="form-select form-select-sm">
                    <option value="">Unassigned</option>
                    @foreach (var user in Users)
                    {
                        <option value="@user.Id">@user.FullName</option>
                    }
                </InputSelect>
            </div>

            <div class="col-12">
                <InputCheckbox @bind-Value="Task.IsCompleted" class="form-check-input" />
                <label class="form-check-label">Completed</label>
            </div>

            <div class="col-12">
                <label class="form-label-sm">Description</label>
                <InputTextArea @bind-Value="Task.Description" class="form-control form-control-sm" />
            </div>

            <div class="col-12">
                <button type="submit" class="btn btn-success form-control form-control-sm">Update</button>
            </div>

            <div class="col-6">
                <button type="button" @onclick="@DeleteTaskAsync" class="btn btn-danger form-control form-control-sm">Delete</button>
            </div>
            <div class="col-6">
                <button type="button" @onclick="@CancelEditAsync" class="btn btn-outline-light form-control form-control-sm">Cancel</button>
            </div>
        </div>


    </EditForm>
}


@code {

    [Parameter]
    public TaskDto? Task { get; set; }

    [Parameter]
    public EventCallback OnUpdated { get; set; }

    [Parameter]
    public EventCallback OnCanceled { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleted { get; set; }    

    private InputText? NameTextInput { get; set; }
    private List<UserDto> Users { get; set; } = new();
    private List<TaskBoardDto> TaskBoards { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var setFocusTask = SetFocusToNameTextInputAsync();
        var loadUsersTask = UserService.GetUsersAsync();
        var loadTaskBoardsTask = TaskBoardService.GetTaskBoardsAsync();

        await System.Threading.Tasks.Task.WhenAll(setFocusTask, loadTaskBoardsTask, loadUsersTask);

        Users = loadUsersTask.Result;
        TaskBoards = loadTaskBoardsTask.Result;

        await base.OnInitializedAsync();
        
    }

    private async Task SetFocusToNameTextInputAsync()
    {
        if (NameTextInput?.Element is null)
            return;

        await NameTextInput.Element.Value.FocusAsync();
    }

    private async Task UpdateTaskAsync()
    {
        if (Task is null)
            return;

        await TaskService.UpdateTaskAsync(Task);
        await OnUpdated.InvokeAsync(Task);
    }

    private async Task DeleteTaskAsync()
    {
        if (Task is null)
            return;

        await TaskService.DeleteTaskAsync(Task);
        await OnDeleted.InvokeAsync(Task.Id);
    }

    private async Task CancelEditAsync()
    {
        await OnCanceled.InvokeAsync();
    }

}